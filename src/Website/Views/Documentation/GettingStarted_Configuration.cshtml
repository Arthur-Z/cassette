<h2>Configuration</h2>
<p>Out of the box, Cassette runs in a very simple mode where each asset is treated separately.
However, referencing many separate files in production is bad for performance.
So let's configure Cassette to combine assets into modules.
</p>
<p>The nuget package added a file to your project called <code>CassetteConfiguration.cs</code>.</p>
<pre><code>
<span class="keyword">public class</span> <span class="code-type">CassetteConfiguration</span> : <span class="code-type">ICassetteConfiguration</span> {
    <span class="keyword">public</span> <span class="keyword">void</span> Configure(
        <span class="code-type">ModuleConfiguration</span> moduleConfiguration,
        <span class="code-type">ICassetteApplication</span> application)
    {
    }
}</code></pre>
<p>In the <code>Configure</code> method we can set up how Cassette will work with your assets.</p>
<p>Let's tell Cassette to treat all the assets as a single module.</p>
<pre><code>
<span class="keyword">public class</span> <span class="code-type">CassetteConfiguration</span> : <span class="code-type">ICassetteConfiguration</span> {
    <span class="keyword">public</span> <span class="keyword">void</span> Configure(
        <span class="code-type">ModuleConfiguration</span> moduleConfiguration,
        <span class="code-type">ICassetteApplication</span> application)
    {
        moduleConfiguration.Add(
            <span class="keyword">new</span> <span class="code-type">DirectorySource</span>&lt;<span class="code-type">ScriptModule</span>&gt;(<span class="string">"Scripts"</span>)
            {
                FilePattern = <span class="string">"*.js"</span>
            }
        );
    }
}</code></pre>